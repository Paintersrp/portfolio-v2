---
import merge from 'lodash.merge'

import BlogLink from '@/components/blog/ui/BlogLink.astro'
import RelatedPosts from '@/components/blog/RelatedPosts.astro'
import SinglePost from '@/components/blog/SinglePost.astro'
import Layout from '@/layouts/PageLayout.astro'
import { getStaticPathsBlogPost } from '@/utils/blog'
import { getCanonicalUrl } from '@/utils/paths'

import type { InferGetStaticPropsType, GetStaticPaths } from 'astro'
import type { MetadataConfig } from '@/types/site'

export const prerender = true

export const getStaticPaths = (async () => {
  return await getStaticPathsBlogPost()
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { post } = Astro.props as Props

const canonical = post.metadata?.canonical || getCanonicalUrl(post.permalink)

const metadata = merge(
  {
    title: post.title,
    description: post.excerpt,
    robots: {
      index: true,
      follow: true,
    },
    openGraph: {
      type: 'article',
      ...(post.image
        ? {
            images: [
              {
                url: post.image,
              },
            ],
          }
        : {}),
    },
  },
  {
    ...(post?.metadata ? { ...post.metadata, canonical } : {}),
  }
) as MetadataConfig
---

<Layout metadata={metadata} showRssFeed>
  <SinglePost post={{ ...post, image: post.image }} />
  <BlogLink />
  <RelatedPosts post={post} />
</Layout>

<script>
  const copyIcon = `
    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" class="size-4 md:size-5">
      <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
        <path d="M7 9.667A2.667 2.667 0 0 1 9.667 7h8.666A2.667 2.667 0 0 1 21 9.667v8.666A2.667 2.667 0 0 1 18.333 21H9.667A2.667 2.667 0 0 1 7 18.333z" />
        <path d="M4.012 16.737A2.005 2.005 0 0 1 3 15V5c0-1.1.9-2 2-2h10c.75 0 1.158.385 1.5 1" />
      </g>
    </svg>
  `

  const copiedIcon = `
    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" class="size-4 md:size-5">
      <path fill="currentColor" d="M18.333 6A3.667 3.667 0 0 1 22 9.667v8.666A3.667 3.667 0 0 1 18.333 22H9.667A3.667 3.667 0 0 1 6 18.333V9.667A3.667 3.667 0 0 1 9.667 6zM15 2c1.094 0 1.828.533 2.374 1.514a1 1 0 1 1-1.748.972C15.405 4.088 15.284 4 15 4H5c-.548 0-1 .452-1 1v9.998c0 .32.154.618.407.805l.1.065a1 1 0 1 1-.99 1.738A3 3 0 0 1 2 15V5c0-1.652 1.348-3 3-3zm1.293 9.293L13 14.585l-1.293-1.292a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 0 0-1.414-1.414" />
    </svg>
  `

  function alterCodeBlocks() {
    const codeBlocks = Array.from(document.querySelectorAll('pre'))

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement('div')
      wrapper.style.position = 'relative'

      const copyButton = document.createElement('button')
      copyButton.className = 'copy-code'
      copyButton.innerHTML = copyIcon

      codeBlock.setAttribute('tabindex', '0')
      codeBlock.appendChild(copyButton)

      // wrap codebock with relative parent element
      codeBlock.parentNode!.insertBefore(wrapper, codeBlock)
      wrapper.appendChild(codeBlock)

      copyButton.addEventListener('click', async () => {
        await copyCode(codeBlock, copyButton)
      })
    }
  }

  async function copyCode(block: HTMLPreElement, button: HTMLButtonElement) {
    const code = block.querySelector('code')

    if (!code) {
      return
    }

    const text = code.innerText

    await navigator.clipboard.writeText(text)

    button.innerHTML = copiedIcon

    setTimeout(() => {
      button.innerHTML = copyIcon
    }, 3000)
  }

  alterCodeBlocks()

  document.addEventListener('astro:after-swap', () => {
    alterCodeBlocks()
  })
</script>
