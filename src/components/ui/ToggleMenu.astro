---
interface Props {
  label?: string
  class?: string
}

const {
  label = 'Toggle Menu',
  class:
    className = 'flex flex-col h-12 w-12 rounded justify-center items-center cursor-pointer group',
} = Astro.props
---

<button data-menu-toggle aria-label={label} class={className}>
  <span class="sr-only">{label}</span>

  <svg
    id="button-svg"
    viewBox="0 0 100 100"
    fill="none"
    stroke="currentColor"
    stroke-width="6"
    aria-hidden="true"
  >
    <path
      aria-hidden="true"
      class="top font-bold"
      d="m 30,33 h 40 c 3.722839,0 7.5,3.126468 7.5,8.578427 0,5.451959 -2.727029,8.421573 -7.5,8.421573 h -20"
    ></path>
    <path aria-hidden="true" class="middle font-bold" d="m 30,50 h 40"></path>
    <path
      aria-hidden="true"
      class="bottom font-bold"
      d="m 70,67 h -40 c 0,0 -7.5,-0.802118 -7.5,-8.365747 0,-7.563629 7.5,-8.634253 7.5,-8.634253 h 20"
    ></path>
  </svg>
</button>

<script>
  function addListeners() {
    const matches = document.querySelectorAll('[data-menu-toggle]')

    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener('click', () => toggleMenu(elem), false)
      })
    }
  }

  function toggleMenu(elem: Element) {
    elem.classList.toggle('open')

    document.body.classList.toggle('overflow-hidden')
    document.getElementById('header')?.classList.toggle('h-screen')
    document.getElementById('header')?.classList.toggle('expanded')
    document.getElementById('header')?.classList.toggle('bg-page')

    document.querySelector('#header nav')?.classList.toggle('hidden')
    document.querySelector('#header > div > div:last-child')?.classList.toggle('hidden')
  }

  addListeners()

  document.addEventListener('astro:after-swap', () => {
    addListeners()
  })
</script>

<style>
  :root {
    --transition-duration: 500ms;
  }

  button {
    cursor: pointer;
    display: flex;
    align-items: center;
    overflow: hidden;
  }

  svg {
    transition: transform var(--transition-duration);
  }

  .top {
    stroke-dasharray: 40 160;
    transition: stroke-dashoffset var(--transition-duration);
  }

  .middle {
    transform-origin: 50%;
    transition: transform var(--transition-duration);
  }

  .bottom {
    stroke-dasharray: 40 160;
    transition: stroke-dashoffset var(--transition-duration);
  }

  .open {
    transform: rotate(45deg);
  }

  .open .top,
  .open .bottom {
    stroke-dashoffset: -64px;
  }

  .open .middle {
    transform: rotate(90deg);
  }
</style>
